# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Commands

### Development Commands

#### Docker (Primary Development Environment)
This project uses Docker for local development with Just as a task runner:

```bash
# Build Docker containers
just build

# Start development environment
just up

# Stop containers
just down

# Remove containers and volumes
just prune

# View logs
just logs [service]

# Run Django management commands
just manage <command>
```

#### Python/Django Commands
```bash
# Run tests
pytest

# Type checking
mypy xamu

# Code formatting and linting
ruff check .
ruff format .

# Django template linting
djlint --check .

# Test coverage
coverage run -m pytest
coverage html

# Create superuser (via Docker)
just manage createsuperuser

# Database migrations
just manage makemigrations
just manage migrate
```

#### Frontend Commands
```bash
# Development server with hot reload
npm run dev

# Production build
npm run build
```

#### Celery Commands (via Docker)
```bash
# Run Celery worker
just manage shell -c "celery -A config.celery_app worker -l info"

# Run Celery beat scheduler
just manage shell -c "celery -A config.celery_app beat"
```

### Testing Commands
```bash
# Run all tests
pytest

# Run specific test file
pytest xamu/users/tests/test_models.py

# Run tests with coverage
coverage run -m pytest

# Generate coverage report
coverage html
```

## Architecture

### Project Structure
- **Django Backend**: Main application framework with custom User model using email authentication
- **Docker-based Development**: Complete containerized environment with docker-compose
- **Webpack Frontend**: Modern JavaScript/CSS build pipeline with Bootstrap 5
- **Celery Integration**: Asynchronous task processing with Redis/database broker
- **API Layer**: Django REST Framework with automatic OpenAPI documentation
- **Multi-App Architecture**: Modular applications for different business domains

### Key Components

#### Multi-Tenant Architecture (`xamu/schools/`)
- **Établissement-based multi-tenancy**: Each school is a separate tenant with isolated data
- **Secure invitation system**: Schools can invite users via email with UUID tokens
- **Tenant middleware**: Automatic tenant resolution from URL patterns (`/etb001/`)
- **Auto-filtering**: All database queries automatically filtered by tenant context
- **Thread-local storage**: Current tenant available globally via `request.tenant`
- **Permission system**: Role-based access (chef_etablissement, professeur, cpe, parent)

#### User Management (`xamu/users/`)
- Custom User model with email-based authentication (no username)
- Extended with tenant-aware fields: `etablissement` and `role`
- Auto-generated unique identifiers (format: ETB01-PROF-2024-001)
- Django Allauth integration for social authentication
- REST API endpoints for user operations
- Comprehensive test coverage

#### Settings Architecture (`config/settings/`)
- Base settings with environment-specific overrides
- Local, production, and test configurations
- Environment variable management with django-environ
- Multi-tenant context processors and middleware configured

#### API Structure (`config/api_router.py`)
- Centralized API routing with DRF
- Automatic API documentation via drf-spectacular
- Token-based authentication support

#### Frontend Pipeline
- Webpack configuration for JS/CSS bundling
- Bootstrap 5 with custom SCSS variables
- Separate vendor and project bundles
- Hot reload support in development

### Database
- PostgreSQL (configured via DATABASE_URL environment variable)
- Atomic transactions enabled by default
- Migration files in standard Django locations

### Multi-Tenant URL Structure
- **Global URLs**: `/admin/`, `/api/`, `/about/` - no tenant context
- **Tenant URLs**: `/{tenant_code}/` - all URLs prefixed with school code
- **Invitation URLs**: `/schools/invitation/{code}/{token}/` - secure signup process
- **Tenant Resolution**: Automatic from URL, cached in Redis for performance
- **Access Control**: Users can only access their assigned school's tenant URLs

### Static Assets
- Webpack bundles in `xamu/static/webpack_bundles/`
- SCSS compilation with Bootstrap customization
- Static file serving configured for both development and production

### Internationalization
- Multi-language support configured (English, French, Portuguese)
- Translation files in `locale/` directory
- UTC timezone with i18n enabled

## Development Workflow

### Local Development Setup
1. Use `just up` to start the Docker environment
2. Use `just manage migrate` to apply database migrations
3. Use `just manage createsuperuser` to create an admin user
4. Frontend assets are built automatically via webpack

### Code Quality
- Ruff for Python linting and formatting (configured in pyproject.toml)
- MyPy for type checking
- djLint for Django template linting
- Pre-configured with extensive rule sets

### Testing Strategy
- pytest with Django integration
- Coverage reporting with django-coverage-plugin
- Factory-based test data generation
- API testing with DRF test client

### Email Development
- Mailpit container for local email testing
- Access web interface at http://127.0.0.1:8025
- School invitation emails automatically sent with UUID tokens

### Multi-Tenant Development Patterns

#### Creating Tenant-Aware Models
```python
from xamu.schools.mixins import TenantMixin

class YourModel(TenantMixin):
    name = models.CharField(max_length=100)
    # etablissement field automatically added
    # objects automatically filtered by current tenant
```

#### Using Tenant Context
```python
from xamu.schools.utils import TenantContext

# In views: request.tenant is automatically available
# In Celery tasks or management commands:
with TenantContext(etablissement):
    # All operations filtered by this tenant
    pass
```

#### Testing Multi-Tenant Code
- Use `TenantContext` in tests for isolation
- Test data automatically cleaned between tenants
- Factory Boy integration with tenant-aware factories

## Business Applications

### Academic Management (`xamu/academic/`)
- **Matiere**: Academic subjects with color coding and short codes
- **Classe**: School classes with levels, principal teachers, and capacity management
- **Eleve**: Students with INE numbers, birth dates, and class assignments
- **RelationFamiliale**: Parent-student relationships with notification preferences
- Full multi-tenant isolation and validation

### Attendance Tracking (`xamu/attendance/`)
- **Cours**: Scheduled classes with teachers, subjects, and classroom management
- **Absence**: Comprehensive absence tracking (absence, tardiness, early departure)
- **StatistiquesAbsences**: Pre-calculated statistics for performance optimization
- Real-time absence notifications and justification workflow

### CSV Import System (`xamu/imports/`)
- **Sequential import workflow**: Personnel → Classes → Students → Courses
- **ImportSession**: Session-based import with validation and preview phases
- **ImportLog**: Detailed audit trail with line-by-line error tracking
- **ImportInvitation**: Traceability of invitations created during imports
- Supports multiple formats with robust validation and rollback capabilities

#### Import Workflow
1. **Personnel Import**: Creates user accounts with secure invitations
2. **Classes Import**: Creates classes with principal teacher assignments
3. **Students Import**: Creates students with automatic parent account creation
4. **Courses Import**: (Future) Automated schedule imports

#### Supported CSV Formats

**Personnel Import:**
```csv
nom;prenom;email;role;matiere
Dupont;Marie;marie.dupont@email.fr;professeur;Mathématiques
```

**Classes Import:**
```csv
nom_classe;niveau;annee_scolaire;professeur_principal_email;effectif_max
6A;6e;2024-2025;marie.dupont@email.fr;30
```

**Students Import:**
```csv
nom_eleve;prenom_eleve;classe;parent1_nom;parent1_prenom;parent1_email;parent1_relation
Martin;Lucas;6A;Martin;Pierre;pierre.martin@email.fr;pere
```

### Notification System (`xamu/notifications/`)
- **Email notifications** for absence alerts and system events
- **SMS integration** ready for critical alerts
- **Parent notification preferences** with opt-in/opt-out controls
- **Notification templates** for different event types

## Development Patterns

### Creating New Import Types
```python
from xamu.imports.services import BaseImportService

class YourImportService(BaseImportService):
    @property
    def required_columns(self):
        return ['required_field1', 'required_field2']
    
    def validate_row(self, row, line_num):
        # Your validation logic
        return validated_data
    
    def process_validated_data(self, validated_data):
        # Your import logic
        pass
```

### Adding Business Logic to Models
```python
from xamu.schools.mixins import TenantMixin

class YourBusinessModel(TenantMixin):
    name = models.CharField(max_length=100)
    
    def your_business_method(self):
        # Tenant context is automatically available
        return self.etablissement.some_related_data
```

## Key Configuration Files
- `pyproject.toml`: Python tooling configuration (pytest, mypy, ruff, djlint)
- `justfile`: Docker-based development commands
- `docker-compose.local.yml`: Local development environment
- `webpack/`: Frontend build configuration
- `config/settings/`: Django settings modules


